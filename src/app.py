import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import google.generativeai as genai
import os
from dotenv import load_dotenv
import numpy as np
from plotly.subplots import make_subplots
from src.analyzers.company_scorer import CompanyScorer
from src.analyzers.price_analyzer import PriceTrendAnalyzer
from src.analyzers.report_generator import ReportGenerator
from src.analyzers.portfolio_analyzer import PortfolioAnalyzer
from src.analyzers.price_predictor import PricePredictor
from src.charts.chart_creator import ChartCreator
from src.utils.api_client import FireantAPI
from src.utils.symbol_validator import SymbolValidator
import logging
from datetime import datetime, timedelta

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
model = genai.GenerativeModel('gemini-2.5-pro-exp-03-25')

def main():
    st.set_page_config(
        page_title="AI Trading Analysis",
        page_icon="üìà",
        layout="wide"
    )
    
    # Add sidebar menu
    with st.sidebar:
        st.title("Menu")
        menu_option = st.radio(
            "Ch·ªçn ch·ª©c nƒÉng",
            ["Ph√¢n T√≠ch C·ªï Phi·∫øu", "Ph√¢n B·ªï Danh M·ª•c", "Tr·ª£ L√Ω ƒê·∫ßu T∆∞"]
        )
    
    if menu_option == "Ph√¢n T√≠ch C·ªï Phi·∫øu":
        st.title("AI Trading Analysis")
        st.write("Ph√¢n t√≠ch t√†i ch√≠nh v√† xu h∆∞·ªõng gi√° t·ª± ƒë·ªông s·ª≠ d·ª•ng AI")
        
        # Initialize components
        api_client = FireantAPI()
        chart_creator = ChartCreator()
        report_generator = ReportGenerator()
        symbol_validator = SymbolValidator()
        
        # Get user input
        symbol = st.text_input("Nh·∫≠p m√£ ch·ª©ng kho√°n (VD: VNM, VCB, VHM):", "").upper()
        
        if symbol:
            # Validate symbol using Gemini
            validation_result = symbol_validator.validate_symbol(symbol)
            
            if not validation_result["is_valid"]:
                st.error(f"M√£ ch·ª©ng kho√°n kh√¥ng h·ª£p l·ªá: {validation_result['reason']}")
                return
                
            st.success(f"M√£ ch·ª©ng kho√°n h·ª£p l·ªá: {symbol} - {validation_result['company_name']} ({validation_result['exchange']})")
            
            # Continue with existing analysis code
            try:
                with st.spinner("ƒêang ph√¢n t√≠ch..."):
                    # Initialize analyzers
                    scorer = CompanyScorer(symbol, api_client)
                    price_analyzer = PriceTrendAnalyzer(symbol, api_client)
                    price_predictor = PricePredictor()
                    
                    # Get analysis results
                    financial_result = scorer.calculate_score()
                    price_analysis = price_analyzer.analyze()
                    price_prediction = price_predictor.train(price_analyzer.price_data, symbol)
                    
                    # Generate reports
                    financial_report = report_generator.generate_financial_report(scorer, financial_result)
                    price_report = report_generator.generate_price_analysis_report(price_analysis, price_analyzer.price_data)
                    
                    # Display results
                    # ... rest of the existing display code ...
            
            except Exception as e:
                logger.error(f"Error in main analysis: {str(e)}")
                st.error(f"L·ªói khi ph√¢n t√≠ch: {str(e)}")
                st.error("Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ch·ª©ng kho√°n v√† th·ª≠ l·∫°i.")
    elif menu_option == "Ph√¢n B·ªï Danh M·ª•c":
        st.title("Ph√¢n B·ªï Danh M·ª•c ƒê·∫ßu T∆∞")
        st.write("Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t ph√¢n b·ªï danh m·ª•c d·ª±a tr√™n ƒëi·ªÉm s·ªë t√†i ch√≠nh v√† th·ªùi gian ho√†n v·ªën")
        
        # Get list of symbols from user
        symbols_input = st.text_area(
            "Nh·∫≠p danh s√°ch m√£ ch·ª©ng kho√°n (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y):",
            "VNM, VCB, VHM, FPT, VIC"
        )
        
        # Process input
        symbols = [s.strip().upper() for s in symbols_input.split(",")]
        
        if st.button("Ph√¢n T√≠ch Danh M·ª•c"):
            try:
                with st.spinner("ƒêang ph√¢n t√≠ch danh m·ª•c..."):
                    # Initialize portfolio analyzer
                    portfolio_analyzer = PortfolioAnalyzer(symbols)
                    portfolio_result = portfolio_analyzer.analyze_portfolio()
                    
                    # Display portfolio summary
                    st.subheader("T·ªïng Quan Danh M·ª•c")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "S·ªë C√¥ng Ty",
                            portfolio_result['summary']['total_companies']
                        )
                    
                    with col2:
                        st.metric(
                            "ƒêi·ªÉm S·ªë Trung B√¨nh",
                            f"{portfolio_result['summary']['average_score']:.2f}/100"
                        )
                    
                    with col3:
                        st.metric(
                            "Th·ªùi Gian Ho√†n V·ªën TB",
                            f"{portfolio_result['summary']['average_payback']:.1f} nƒÉm"
                        )
                    
                    # Display portfolio allocation
                    st.subheader("ƒê·ªÅ Xu·∫•t Ph√¢n B·ªï Danh M·ª•c")
                    
                    # Create DataFrame for portfolio metrics
                    portfolio_data = []
                    for symbol, metrics in portfolio_result['summary']['portfolio_metrics'].items():
                        portfolio_data.append({
                            'M√£ CK': symbol,
                            'T·ª∑ Tr·ªçng (%)': f"{metrics['weight'] * 100:.1f}%",
                            'ƒêi·ªÉm S·ªë': f"{metrics['score']:.2f}/100",
                            'Th·ªùi Gian HV': f"{metrics['payback_time']:.1f} nƒÉm",
                            'P/E': f"{metrics['pe_ratio']:.2f}",
                            'ROE (%)': f"{metrics['roe'] * 100:.2f}%",
                            'C·ªï T·ª©c (%)': f"{metrics['dividend_yield'] * 100:.2f}%"
                        })
                    
                    df = pd.DataFrame(portfolio_data)
                    st.dataframe(df, use_container_width=True)
                    
                    # Create pie chart for portfolio allocation
                    fig = go.Figure(data=[go.Pie(
                        labels=[f"{row['M√£ CK']} ({row['T·ª∑ Tr·ªçng (%)']})" for _, row in df.iterrows()],
                        values=[float(row['T·ª∑ Tr·ªçng (%)'].strip('%')) for _, row in df.iterrows()],
                        hole=.3
                    )])
                    fig.update_layout(title="Ph√¢n B·ªï Danh M·ª•c")
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Display detailed analysis
                    st.subheader("Ph√¢n T√≠ch Chi Ti·∫øt")
                    
                    # Create tabs for different views
                    tab1, tab2 = st.tabs(["So S√°nh ƒêi·ªÉm S·ªë", "So S√°nh Th·ªùi Gian Ho√†n V·ªën"])
                    
                    with tab1:
                        # Create bar chart for scores
                        fig = go.Figure(data=[
                            go.Bar(
                                x=df['M√£ CK'],
                                y=[float(score.strip('/100')) for score in df['ƒêi·ªÉm S·ªë']],
                                text=df['ƒêi·ªÉm S·ªë'],
                                textposition='auto',
                            )
                        ])
                        fig.update_layout(
                            title="So S√°nh ƒêi·ªÉm S·ªë T√†i Ch√≠nh",
                            yaxis_title="ƒêi·ªÉm S·ªë",
                            yaxis_range=[0, 100]
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
                    with tab2:
                        # Create bar chart for payback times
                        fig = go.Figure(data=[
                            go.Bar(
                                x=df['M√£ CK'],
                                y=[float(time.strip(' nƒÉm')) for time in df['Th·ªùi Gian HV']],
                                text=df['Th·ªùi Gian HV'],
                                textposition='auto',
                            )
                        ])
                        fig.update_layout(
                            title="So S√°nh Th·ªùi Gian Ho√†n V·ªën",
                            yaxis_title="NƒÉm"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
            except Exception as e:
                st.error(f"L·ªói khi ph√¢n t√≠ch danh m·ª•c: {str(e)}")
                st.error("Vui l√≤ng ki·ªÉm tra l·∫°i danh s√°ch m√£ ch·ª©ng kho√°n v√† th·ª≠ l·∫°i.")
    elif menu_option == "Tr·ª£ L√Ω ƒê·∫ßu T∆∞":
        st.title("Tr·ª£ L√Ω ƒê·∫ßu T∆∞ AI")
        st.write("T∆∞∆°ng t√°c v·ªõi AI ƒë·ªÉ nh·∫≠n t∆∞ v·∫•n v√† ph√¢n t√≠ch v·ªÅ ƒë·∫ßu t∆∞ ch·ª©ng kho√°n")
        
        # Initialize session state for chat history if it doesn't exist
        if "messages" not in st.session_state:
            st.session_state.messages = []
            # Add welcome message
            st.session_state.messages.append({
                "role": "assistant",
                "content": "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch v√† t∆∞ v·∫•n v·ªÅ ƒë·∫ßu t∆∞ ch·ª©ng kho√°n. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n\n"
                "1. Ph√¢n t√≠ch t√†i ch√≠nh c·ªßa m·ªôt c√¥ng ty\n"
                "2. Xu h∆∞·ªõng gi√° v√† ch·ªâ b√°o k·ªπ thu·∫≠t\n"
                "3. D·ª± b√°o gi√° trong t∆∞∆°ng lai\n"
                "4. So s√°nh c√°c c·ªï phi·∫øu\n"
                "5. T∆∞ v·∫•n ph√¢n b·ªï danh m·ª•c\n\n"
                "H√£y nh·∫≠p m√£ ch·ª©ng kho√°n v√† c√¢u h·ªèi c·ªßa b·∫°n!"
            })
        
        # Display chat messages
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Get user input
        if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
            # Add user message to chat history
            st.session_state.messages.append({"role": "user", "content": prompt})
            
            # Display user message
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Process the query
            try:
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    # Extract stock symbol and financial metric from the prompt
                    common_metrics = {
                        'ROE', 'ROA', 'P/E', 'EPS', 'FCF', 'PE', 'PB', 'PS', 'EV', 'EBITDA', 
                        'NIM', 'CIR', 'CLR', 'LDR', 'LAR', 'ROE', 'ROA', 'P/E', 'EPS', 'FCF', 
                        'PE', 'PB', 'PS', 'EV', 'EBITDA', 'NIM', 'CIR', 'CLR', 'LDR', 'LAR'
                    }
                    
                    # First try to find a stock symbol (2-3 uppercase letters not in common_metrics)
                    symbols = [
                        word for word in prompt.split() 
                        if word.isupper() 
                        and len(word) <= 3 
                        and word not in common_metrics
                    ]
                    symbol = symbols[0] if symbols else None
                    
                    # Then try to find a financial metric
                    metrics = [
                        word for word in prompt.split() 
                        if word.isupper() 
                        and word in common_metrics
                    ]
                    metric = metrics[0] if metrics else None
                    
                    # Extract time period if mentioned
                    time_period = None
                    if '5' in prompt:
                        time_period = 5
                    elif '10' in prompt:
                        time_period = 10
                    elif '3' in prompt:
                        time_period = 3
                    
                    # Prepare context for the AI
                    context = ""
                    if symbol and metric:
                        try:
                            # Initialize components
                            api_client = FireantAPI()
                            scorer = CompanyScorer(symbol, api_client)
                            
                            # Get the metric value
                            if metric == 'ROE':
                                value = scorer.data['latest'].get('ROE', 0) * 100
                            elif metric == 'ROA':
                                value = scorer.data['latest'].get('NetProfitFromOperatingActivity', 0) / scorer.data['latest'].get('TotalAsset', 1) * 100
                            elif metric == 'P/E':
                                value = scorer.data['fundamental']['financial_metrics']['P/E']
                            elif metric == 'EPS':
                                value = scorer.data['fundamental']['financial_metrics']['EPS']
                            elif metric == 'FCF':
                                value = scorer.data['latest'].get('FreeCashFlow', 0)
                            else:
                                value = 0
                            
                            context = f"""
                            Th√¥ng tin {metric} c·ªßa {symbol}:
                            - Gi√° tr·ªã hi·ªán t·∫°i: {value:.2f}
                            - C√¥ng ty: {scorer.data['fundamental']['company_info']['T√™n c√¥ng ty']}
                            - S√†n: {scorer.data['fundamental']['company_info']['S√†n']}
                            """
                        except Exception as e:
                            context = f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu {metric} cho {symbol}. L·ªói: {str(e)}"
                    
                    # Prepare the prompt for the AI
                    ai_prompt = f"""
                    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n v·ªÅ ph√¢n t√≠ch ƒë·∫ßu t∆∞ ch·ª©ng kho√°n. 
                    H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch chuy√™n nghi·ªáp v√† h·ªØu √≠ch.
                    
                    {context}
                    
                    C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {prompt}
                    
                    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† ƒë·∫£m b·∫£o:
                    1. S·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu
                    2. Cung c·∫•p th√¥ng tin chi ti·∫øt v√† c√≥ cƒÉn c·ª©
                    3. ƒê∆∞a ra khuy·∫øn ngh·ªã r√µ r√†ng n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                    4. Lu√¥n nh·∫Øc nh·ªü v·ªÅ r·ªßi ro ƒë·∫ßu t∆∞
                    """
                    
                    # Get AI response
                    response = model.generate_content(ai_prompt)
                    
                    # Add assistant response to chat history
                    st.session_state.messages.append({"role": "assistant", "content": response.text})
                    
                    # Display assistant response
                    with st.chat_message("assistant"):
                        st.markdown(response.text)
                        
            except Exception as e:
                error_message = f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n: {str(e)}"
                st.session_state.messages.append({"role": "assistant", "content": error_message})
                with st.chat_message("assistant"):
                    st.markdown(error_message)

if __name__ == "__main__":
    main() 
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import google.generativeai as genai
import os
from dotenv import load_dotenv
import numpy as np
from plotly.subplots import make_subplots
from src.analyzers.company_scorer import CompanyScorer
from src.analyzers.price_analyzer import PriceTrendAnalyzer
from src.analyzers.report_generator import ReportGenerator
from src.analyzers.portfolio_analyzer import PortfolioAnalyzer
from src.analyzers.price_predictor import PricePredictor
from src.charts.chart_creator import ChartCreator
from src.utils.api_client import FireantAPI
import logging
from datetime import datetime, timedelta

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
model = genai.GenerativeModel('gemini-2.5-pro-exp-03-25')

def main():
    st.set_page_config(
        page_title="AI Trading Analysis",
        page_icon="üìà",
        layout="wide"
    )
    
    # Add sidebar menu
    with st.sidebar:
        st.title("Menu")
        menu_option = st.radio(
            "Ch·ªçn ch·ª©c nƒÉng",
            ["Ph√¢n T√≠ch C·ªï Phi·∫øu", "Ph√¢n B·ªï Danh M·ª•c"]
        )
    
    if menu_option == "Ph√¢n T√≠ch C·ªï Phi·∫øu":
        st.title("AI Trading Analysis")
        st.write("Ph√¢n t√≠ch t√†i ch√≠nh v√† xu h∆∞·ªõng gi√° t·ª± ƒë·ªông s·ª≠ d·ª•ng AI")
        
        # Initialize components
        api_client = FireantAPI()
        chart_creator = ChartCreator()
        report_generator = ReportGenerator()
        
        # Get user input
        symbol = st.text_input("Nh·∫≠p m√£ ch·ª©ng kho√°n (VD: VNM, VCB, VHM):", "").upper()
        
        if symbol:
            try:
                with st.spinner("ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
                    # Initialize analyzers
                    scorer = CompanyScorer(symbol)
                    price_analyzer = PriceTrendAnalyzer(symbol)
                    
                    # Get analysis results
                    financial_result = scorer.calculate_score()
                    price_analysis = price_analyzer.analyze_trend()
                    price_data = price_analyzer.price_data
                    
                    # Update title with company name
                    company_name = scorer.data['fundamental']['company_info']['T√™n c√¥ng ty']
                    st.title(f"Ph√¢n T√≠ch ƒêi·ªÉm S·ªë T√†i Ch√≠nh - {company_name} ({symbol})")
                    
                    st.markdown(f"**Lo·∫°i C√¥ng Ty:** {'Ng√¢n H√†ng' if scorer.company_type == 'bank' else 'C√¥ng Ty Th∆∞·ªùng'}")
                    
                    # Display results in tabs
                    tab1, tab2, tab3, tab4 = st.tabs(["Ph√¢n T√≠ch T√†i Ch√≠nh", "Ph√¢n T√≠ch Xu H∆∞·ªõng Gi√°", "D·ª± ƒêo√°n Gi√° AI", "B√°o C√°o Chi Ti·∫øt"])
                    
                    with tab1:
                        # Display key financial metrics
                        st.subheader("Ch·ªâ S·ªë T√†i Ch√≠nh Ch√≠nh")
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric(
                                "P/E",
                                f"{scorer.data['fundamental']['financial_metrics']['P/E']:.2f}",
                                f"{scorer.data['fundamental']['financial_metrics']['P/E'] - 15:.2f}"
                            )
                            st.metric(
                                "EPS",
                                f"{scorer.data['fundamental']['financial_metrics']['EPS']:.2f}",
                                f"{scorer.data['fundamental']['financial_metrics']['EPS'] - 1:.2f}"
                            )
                            st.metric(
                                "Gi√° Hi·ªán T·∫°i",
                                f"{scorer.data['fundamental']['company_info']['Gi√° hi·ªán t·∫°i']:,.0f}",
                                f"{scorer.data['fundamental']['company_info']['Gi√° hi·ªán t·∫°i'] - 10000:,.0f}"
                            )
                        
                        with col2:
                            latest = scorer.data['latest']
                            st.metric(
                                "ROE",
                                f"{latest.get('ROE', 0) * 100:.2f}%",
                                f"{latest.get('ROE', 0) * 100 - 15:.2f}%"
                            )
                            st.metric(
                                "ROA",
                                f"{latest.get('NetProfitFromOperatingActivity', 0) / latest.get('TotalAsset', 1) * 100:.2f}%",
                                f"{latest.get('NetProfitFromOperatingActivity', 0) / latest.get('TotalAsset', 1) * 100 - 5:.2f}%"
                            )
                            payback = scorer.payback_analysis
                            st.metric(
                                "Th·ªùi Gian Ho√†n V·ªën",
                                f"{payback['payback_years']['moderate']:.1f} nƒÉm",
                                f"{payback['payback_years']['moderate'] - 5:.1f} nƒÉm"
                            )
                            st.metric(
                                "C·ªï T·ª©c Trung B√¨nh",
                                f"{payback['metrics']['avg_dividend']:,.0f}",
                                f"{payback['metrics']['avg_dividend_growth']:.1%}"
                            )
                        
                        with col3:
                            latest = scorer.data['latest']
                            st.metric(
                                "C·ªï T·ª©c (%)",
                                f"{latest.get('DividendYield', 0) * 100:.2f}%",
                                f"{latest.get('DividendYield', 0) * 100 - 5:.2f}%"
                            )
                            st.metric(
                                "V·ªën H√≥a",
                                f"{scorer.data['fundamental']['company_info']['V·ªën h√≥a']:,.0f}",
                                f"{scorer.data['fundamental']['company_info']['V·ªën h√≥a'] - 1000000000:,.0f}"
                            )
                            st.metric(
                                "M·ª©c ƒê·ªô ·ªîn ƒê·ªãnh C·ªï T·ª©c",
                                scorer.payback_analysis['dividend_stability'],
                                f"{scorer.payback_analysis['metrics']['avg_coverage_ratio']:.2f}"
                            )
                        
                        with col4:
                            company_info = scorer.data['fundamental']['company_info']
                            st.metric(
                                "Beta",
                                f"{company_info.get('Beta', 0):.2f}",
                                f"{company_info.get('Beta', 0) - 1:.2f}"
                            )
                            # Try different possible keys for foreign ownership room and convert to percentage
                            foreign_room = (
                                company_info.get('Room n∆∞·ªõc ngo√†i', 0) or 
                                company_info.get('foreignPercent', 0) or 
                                company_info.get('foreignOwnership', 0) or 
                                company_info.get('foreign_ownership', 0)
                            )
                            # Convert to percentage if not already in percentage form
                            if foreign_room > 1:
                                foreign_room = foreign_room / 100
                            st.metric(
                                "Room NN",
                                f"{foreign_room * 100:.2f}%",
                                f"{foreign_room * 100 - 30:.2f}%"
                            )
                        
                        # Display financial score
                        col1, col2 = st.columns(2)
                        with col1:
                            st.plotly_chart(
                                chart_creator.create_gauge_chart(
                                    financial_result['final_score'],
                                    f"ƒêi·ªÉm S·ªë T√†i Ch√≠nh - {symbol}"
                                ),
                                use_container_width=True
                            )
                        
                        with col2:
                            st.plotly_chart(
                                chart_creator.create_trend_chart(
                                    financial_result['business_cycle']['yearly_revenue_growth'],
                                    f"TƒÉng Tr∆∞·ªüng Doanh Thu - {symbol}",
                                    "TƒÉng Tr∆∞·ªüng (%)"
                                ),
                                use_container_width=True
                            )
                        
                        # Display ROE and Equity charts
                        col1, col2 = st.columns(2)
                        with col1:
                            st.plotly_chart(
                                chart_creator.create_roe_chart(
                                    scorer.data['yearly']
                                ),
                                use_container_width=True
                            )
                        
                        with col2:
                            st.plotly_chart(
                                chart_creator.create_equity_chart(
                                    scorer.data['yearly']
                                ),
                                use_container_width=True
                            )
                        
                        # Display dividend chart
                        st.plotly_chart(
                            chart_creator.create_dividend_chart(
                                scorer.data['yearly']
                            ),
                            use_container_width=True
                        )
                    
                    with tab2:
                        # Calculate technical indicators first
                        price_data_with_indicators = price_analyzer.calculate_technical_indicators()
                        
                        # Display price trend chart
                        st.plotly_chart(
                            chart_creator.create_price_trend_chart(price_data_with_indicators),
                            use_container_width=True
                        )
                        
                        # Display technical indicators
                        st.plotly_chart(
                            chart_creator.create_technical_indicators_chart(price_data_with_indicators),
                            use_container_width=True
                        )
                        
                        # Display price analysis score
                        col1, col2 = st.columns(2)
                        with col1:
                            st.plotly_chart(
                                chart_creator.create_gauge_chart(
                                    price_analysis['final_score'],
                                    f"ƒêi·ªÉm S·ªë Xu H∆∞·ªõng Gi√° - {symbol}"
                                ),
                                use_container_width=True
                            )
                        
                        with col2:
                            st.metric(
                                "ƒêi·ªÉm S·ªë Xu H∆∞·ªõng",
                                f"{price_analysis['final_score']:.2f}/100",
                                f"{price_analysis['final_score'] - 50:.2f}"
                            )
                    
                    with tab3:
                        st.subheader("D·ª± ƒêo√°n Gi√° S·ª≠ D·ª•ng AI")
                        st.write("M√¥ h√¨nh AI ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ d·ª± ƒëo√°n xu h∆∞·ªõng gi√° trong t∆∞∆°ng lai")
                        
                        if st.button("Ch·∫°y D·ª± ƒêo√°n"):
                            logger.info(f"Price prediction button clicked for symbol: {symbol}")
                            try:
                                with st.spinner("ƒêang l·∫•y d·ªØ li·ªáu gi√°..."):
                                    # Fetch historical price data from API
                                    end_date = datetime.now()
                                    days=365
                                    start_date = end_date - timedelta(days=days)  # 1 years
                                    start_date_str = start_date.strftime('%m/%d/%Y')
                                    end_date_str = end_date.strftime('%m/%d/%Y')
                                    
                                    logger.info(f"Fetching price data for {symbol} from {start_date_str} to {end_date_str}")
                                    price_data = api_client.get_historical_quotes(symbol, start_date_str, end_date_str, offset=0, limit=days)
                                    
                                    if not price_data:
                                        st.error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu gi√° t·ª´ API. Vui l√≤ng th·ª≠ l·∫°i sau.")
                                        return
                                        
                                    # Convert to DataFrame
                                    price_df = pd.DataFrame(price_data)
                                    price_df['date'] = pd.to_datetime(price_df['date'])
                                    price_df.set_index('date', inplace=True)
                                    
                                    if 'priceClose' not in price_df.columns:
                                        st.error("D·ªØ li·ªáu gi√° kh√¥ng c√≥ c·ªôt 'priceClose'. Vui l√≤ng th·ª≠ l·∫°i sau.")
                                        return
                                        
                                    price_df = price_df.sort_index()
                                    
                                    logger.info(f"Got {len(price_df)} days of price data")
                                    
                                    if len(price_df) < 60:
                                        st.error(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ th·ª±c hi·ªán d·ª± ƒëo√°n. C·∫ßn √≠t nh·∫•t 60 ng√†y d·ªØ li·ªáu gi√°, hi·ªán c√≥ {len(price_df)} ng√†y.")
                                        return
                                        
                                with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh AI..."):
                                    logger.info("Initializing PricePredictor")
                                    # Initialize and train the model
                                    predictor = PricePredictor()
                                    logger.info("Training model...")
                                    prediction_result = predictor.train(price_df, symbol)
                                    
                                    logger.info("Getting next days predictions")
                                    # Get predictions for next 5 days
                                    next_days_predictions = predictor.predict_next_days(price_df, symbol)
                                    
                                    # Display current prediction
                                    col1, col2 = st.columns(2)
                                    with col1:
                                        st.metric(
                                            "Gi√° D·ª± ƒêo√°n Ng√†y Mai",
                                            f"{prediction_result['predicted_price']:,.0f}",
                                            f"{prediction_result['predicted_price'] - price_df['priceClose'].iloc[-1]:,.0f}"
                                        )
                                    
                                    with col2:
                                        avg_score = (prediction_result['model_metrics']['rf_score'] + prediction_result['model_metrics']['xgb_score']) / 2
                                        st.metric(
                                            "ƒê·ªô Tin C·∫≠y M√¥ H√¨nh",
                                            f"{avg_score:.2%}",
                                            f"{prediction_result['model_metrics']['rf_score']:.2%} - {prediction_result['model_metrics']['xgb_score']:.2%}"
                                        )
                                    
                                    # Create prediction chart
                                    fig = go.Figure()
                                    
                                    # Add historical prices
                                    fig.add_trace(go.Scatter(
                                        x=price_df.index,
                                        y=price_df['priceClose'],
                                        name='Gi√° L·ªãch S·ª≠',
                                        line=dict(color='blue')
                                    ))
                                    
                                    # Add predicted prices
                                    future_dates = pd.date_range(
                                        start=price_df.index[-1] + pd.Timedelta(days=1),
                                        periods=len(next_days_predictions),
                                        freq='D'
                                    )
                                    
                                    predicted_prices = [p['predicted_price'] for p in next_days_predictions]
                                    confidence_lower = [p['confidence_interval']['lower'] for p in next_days_predictions]
                                    confidence_upper = [p['confidence_interval']['upper'] for p in next_days_predictions]
                                    
                                    fig.add_trace(go.Scatter(
                                        x=future_dates,
                                        y=predicted_prices,
                                        name='D·ª± ƒêo√°n',
                                        line=dict(color='red', dash='dash')
                                    ))
                                    
                                    # Add confidence interval
                                    fig.add_trace(go.Scatter(
                                        x=future_dates.tolist() + future_dates.tolist()[::-1],
                                        y=confidence_upper + confidence_lower[::-1],
                                        fill='toself',
                                        fillcolor='rgba(255,0,0,0.1)',
                                        line=dict(color='rgba(255,0,0,0)'),
                                        name='Kho·∫£ng Tin C·∫≠y'
                                    ))
                                    
                                    fig.update_layout(
                                        title=f"D·ª± ƒêo√°n Gi√° {symbol}",
                                        xaxis_title="Ng√†y",
                                        yaxis_title="Gi√°",
                                        showlegend=True
                                    )
                                    
                                    st.plotly_chart(fig, use_container_width=True)
                                    
                                    # Display detailed predictions
                                    st.subheader("D·ª± ƒêo√°n Chi Ti·∫øt")
                                    prediction_df = pd.DataFrame([
                                        {
                                            'Ng√†y': future_dates[i],
                                            'Gi√° D·ª± ƒêo√°n': f"{p['predicted_price']:,.0f}",
                                            'Kho·∫£ng Tin C·∫≠y': f"{p['confidence_interval']['lower']:,.0f} - {p['confidence_interval']['upper']:,.0f}"
                                        }
                                        for i, p in enumerate(next_days_predictions)
                                    ])
                                    st.dataframe(prediction_df, use_container_width=True)
                                    
                            except ValueError as e:
                                logger.error(f"ValueError in price prediction: {str(e)}")
                                st.error(f"L·ªói khi d·ª± ƒëo√°n gi√°: {str(e)}")
                                st.info("Vui l√≤ng ƒë·∫£m b·∫£o c√≥ ƒë·ªß d·ªØ li·ªáu gi√° (√≠t nh·∫•t 60 ng√†y) v√† th·ª≠ l·∫°i.")
                            except Exception as e:
                                logger.error(f"Unexpected error in price prediction: {str(e)}")
                                st.error(f"L·ªói kh√¥ng mong mu·ªën: {str(e)}")
                                st.info("Vui l√≤ng th·ª≠ l·∫°i sau.")
                    
                    with tab4:
                        # Add a button to generate reports
                        if st.button("T·∫°o B√°o C√°o Chi Ti·∫øt"):
                            with st.spinner("ƒêang t·∫°o b√°o c√°o chi ti·∫øt..."):
                                financial_report = report_generator.generate_financial_report(scorer, financial_result)
                                price_report = report_generator.generate_price_analysis_report(price_analysis, price_data)
                                
                                # Display detailed reports
                                st.subheader("B√°o C√°o Ph√¢n T√≠ch T√†i Ch√≠nh")
                                st.write(financial_report)
                                
                                st.subheader("B√°o C√°o Ph√¢n T√≠ch Xu H∆∞·ªõng Gi√°")
                                st.write(price_report)
                        else:
                            st.info("Nh·∫•n n√∫t 'T·∫°o B√°o C√°o Chi Ti·∫øt' ƒë·ªÉ xem ph√¢n t√≠ch chi ti·∫øt ƒë∆∞·ª£c t·∫°o b·ªüi AI.")
            
            except Exception as e:
                logger.error(f"Error in main analysis: {str(e)}")
                st.error(f"L·ªói khi ph√¢n t√≠ch: {str(e)}")
                st.error("Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ch·ª©ng kho√°n v√† th·ª≠ l·∫°i.")
    elif menu_option == "Ph√¢n B·ªï Danh M·ª•c":
        st.title("Ph√¢n B·ªï Danh M·ª•c ƒê·∫ßu T∆∞")
        st.write("Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t ph√¢n b·ªï danh m·ª•c d·ª±a tr√™n ƒëi·ªÉm s·ªë t√†i ch√≠nh v√† th·ªùi gian ho√†n v·ªën")
        
        # Get list of symbols from user
        symbols_input = st.text_area(
            "Nh·∫≠p danh s√°ch m√£ ch·ª©ng kho√°n (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y):",
            "VNM, VCB, VHM, FPT, VIC"
        )
        
        # Process input
        symbols = [s.strip().upper() for s in symbols_input.split(",")]
        
        if st.button("Ph√¢n T√≠ch Danh M·ª•c"):
            try:
                with st.spinner("ƒêang ph√¢n t√≠ch danh m·ª•c..."):
                    # Initialize portfolio analyzer
                    portfolio_analyzer = PortfolioAnalyzer(symbols)
                    portfolio_result = portfolio_analyzer.analyze_portfolio()
                    
                    # Display portfolio summary
                    st.subheader("T·ªïng Quan Danh M·ª•c")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "S·ªë C√¥ng Ty",
                            portfolio_result['summary']['total_companies']
                        )
                    
                    with col2:
                        st.metric(
                            "ƒêi·ªÉm S·ªë Trung B√¨nh",
                            f"{portfolio_result['summary']['average_score']:.2f}/100"
                        )
                    
                    with col3:
                        st.metric(
                            "Th·ªùi Gian Ho√†n V·ªën TB",
                            f"{portfolio_result['summary']['average_payback']:.1f} nƒÉm"
                        )
                    
                    # Display portfolio allocation
                    st.subheader("ƒê·ªÅ Xu·∫•t Ph√¢n B·ªï Danh M·ª•c")
                    
                    # Create DataFrame for portfolio metrics
                    portfolio_data = []
                    for symbol, metrics in portfolio_result['summary']['portfolio_metrics'].items():
                        portfolio_data.append({
                            'M√£ CK': symbol,
                            'T·ª∑ Tr·ªçng (%)': f"{metrics['weight'] * 100:.1f}%",
                            'ƒêi·ªÉm S·ªë': f"{metrics['score']:.2f}/100",
                            'Th·ªùi Gian HV': f"{metrics['payback_time']:.1f} nƒÉm",
                            'P/E': f"{metrics['pe_ratio']:.2f}",
                            'ROE (%)': f"{metrics['roe'] * 100:.2f}%",
                            'C·ªï T·ª©c (%)': f"{metrics['dividend_yield'] * 100:.2f}%"
                        })
                    
                    df = pd.DataFrame(portfolio_data)
                    st.dataframe(df, use_container_width=True)
                    
                    # Create pie chart for portfolio allocation
                    fig = go.Figure(data=[go.Pie(
                        labels=[f"{row['M√£ CK']} ({row['T·ª∑ Tr·ªçng (%)']})" for _, row in df.iterrows()],
                        values=[float(row['T·ª∑ Tr·ªçng (%)'].strip('%')) for _, row in df.iterrows()],
                        hole=.3
                    )])
                    fig.update_layout(title="Ph√¢n B·ªï Danh M·ª•c")
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Display detailed analysis
                    st.subheader("Ph√¢n T√≠ch Chi Ti·∫øt")
                    
                    # Create tabs for different views
                    tab1, tab2 = st.tabs(["So S√°nh ƒêi·ªÉm S·ªë", "So S√°nh Th·ªùi Gian Ho√†n V·ªën"])
                    
                    with tab1:
                        # Create bar chart for scores
                        fig = go.Figure(data=[
                            go.Bar(
                                x=df['M√£ CK'],
                                y=[float(score.strip('/100')) for score in df['ƒêi·ªÉm S·ªë']],
                                text=df['ƒêi·ªÉm S·ªë'],
                                textposition='auto',
                            )
                        ])
                        fig.update_layout(
                            title="So S√°nh ƒêi·ªÉm S·ªë T√†i Ch√≠nh",
                            yaxis_title="ƒêi·ªÉm S·ªë",
                            yaxis_range=[0, 100]
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
                    with tab2:
                        # Create bar chart for payback times
                        fig = go.Figure(data=[
                            go.Bar(
                                x=df['M√£ CK'],
                                y=[float(time.strip(' nƒÉm')) for time in df['Th·ªùi Gian HV']],
                                text=df['Th·ªùi Gian HV'],
                                textposition='auto',
                            )
                        ])
                        fig.update_layout(
                            title="So S√°nh Th·ªùi Gian Ho√†n V·ªën",
                            yaxis_title="NƒÉm"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
            except Exception as e:
                st.error(f"L·ªói khi ph√¢n t√≠ch danh m·ª•c: {str(e)}")
                st.error("Vui l√≤ng ki·ªÉm tra l·∫°i danh s√°ch m√£ ch·ª©ng kho√°n v√† th·ª≠ l·∫°i.")
    elif menu_option == "So S√°nh C·ªï Phi·∫øu":
        st.title("So S√°nh C·ªï Phi·∫øu")
        st.write("So s√°nh c√°c ch·ªâ s·ªë t√†i ch√≠nh gi·ªØa c√°c c·ªï phi·∫øu")
        
        # Placeholder for stock comparison feature
        st.info("T√≠nh nƒÉng so s√°nh c·ªï phi·∫øu ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng quay l·∫°i sau!")
        
    elif menu_option == "C√†i ƒê·∫∑t":
        st.title("C√†i ƒê·∫∑t")
        st.write("T√πy ch·ªânh c√°c th√¥ng s·ªë ph√¢n t√≠ch")
        
        # Placeholder for settings
        st.info("T√≠nh nƒÉng c√†i ƒë·∫∑t ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng quay l·∫°i sau!")

if __name__ == "__main__":
    main() 